

APPENDIX: THREE-DIMENSIONAL PROJECTIONS OF MEASURE GEOMETRIES

	  (SEE 'SPEW' IN INTERNET TEXT FIRST PART)





DEFDBL A-Z

CONST PI = 3.141593

CONST dtr = PI / 180

here: SCREEN 0: CLS

PRINT "A 3d Program Examining Basic S-Series"

PRINT "for new constants hit r; for new projection hit s"

INPUT "for inc. f w/ cycle hit 2, inc. f w/ va hit 1"; dra

INPUT "color 0 or 1"; col

INPUT "color 1,2,3"; g

INPUT "projection, set default at 1200"; d

INPUT "yaw, set default at 5.68319"; r1

INPUT "roll, set default at 6.28319"; r2

INPUT "pitch, set default at 5.79778"; r3

INPUT "translation, set default at 0,0,-350"; mx, my, mz

restart: INPUT "series exponent, usually 2"; vk

INPUT "increment for modulus"; inc

INPUT "bias for angle"; bias

PRINT "formula: x=x+e+f*h  f=f+u"

INPUT "height (va) mag, 0 = 2d display"; pa

INPUT "incs. e, f, h"; ve, vf, vh

INPUT "set u"; vu

INPUT "magnification gen. 1-6"; j

INPUT "1 for clr va>1; 2 for odd/even if inc = 2"; one

PRINT "window at (-399, -299), (400, 300)"

INPUT "set window bias, x axis / y axis"; pb, pc

px = 0: py = 0: sx = 0: sy = 0: vx = 0: vq = 0: vw = 0

s1 = SIN(r1): c1 = COS(r1): s2 = SIN(r2): c2 = COS(r2)

s3 = SIN(r3): c3 = COS(r3): CLS : SCREEN 1, 0

pd = -399 + pb: pe = 400 + pb: pf = -299 + pc: pg = 300 + pc

WINDOW (pd, pf)-(pe, pg): VIEW PRINT 1 TO 1: COLOR 0, col

ten: IF dra = 1 THEN va = 0

vx = vx + ve + vf * vh: vw = vw + 1

IF dra = 2 THEN va = -1: vf = vf + vu

IF INKEY$ = "r" THEN GOTO restart

IF INKEY$ = "s" THEN GOTO here

two: va = va + 1

IF dra = 1 THEN vf = vf + vu

IF vx MOD vk ^ va = 0 THEN GOTO two

vn = va MOD inc

vv = 360 / inc

vq = (vv * vn + vq + bias) MOD 360

vrq = vq * dtr

px = px + COS(vrq)

py = py + SIN(vrq)

PRINT vw; vx; "   "

x = j * px: y = j * py:

z = j * va * pa

IF one = 1 AND va > 1 THEN

clr = g + 1

END IF

IF one = 1 AND va = 1 THEN

clr = g

END IF

IF one = 2 AND vn = 1 THEN

clr = g + 1

END IF

IF one = 2 AND vn = 2 THEN

clr = g

END IF

PSET (sx, sy), clr

x = -x: xa = c1 * x - s1 * z

za = s1 * x + c1 * z: x = c2 * xa + s2 * y

ya = c2 * y - s2 * xa: z = c3 * za - s3 * ya

y = s3 * za + c3 * ya: x = x + mx: y = y + my: z = z + mz

sx = d * x / z: sy = d * y / z

LINE -(sx, sy), clr

GOTO ten



