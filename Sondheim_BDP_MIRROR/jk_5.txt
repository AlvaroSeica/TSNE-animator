


Software Sloppy Psychology of Sloppy Software


Are there studies on the psychology of software writing? I've been think-
ing about this in relation to the memo program, which I sent out to the
list a while ago, and have since rewritten. I give the current version
below, numbered. I want to look at some issues it raised.

     1  #!/usr/local/bin/perl -w
     2  # Memo Program for Shell Account
       
     3	$| = 1; 
     4	print "\n\aThese are your current messages:\n\n";
     5	print `cat .message`;
     6	`cp .message .message.old`;
     7	print "\n\aWould you like to erase lines? If yes, type y.\n";
     8	chop($no=<STDIN>);
     9	if ($no ne "y") {goto FINAL;} 
    10	print "To erase lines enter first words or unique phrases,\n";
    11	print "one per line, control-d to end.\n";
    12	open(ZIP, ">> begin");
    13	chop(@rem=<STDIN>);
    14	print ZIP @rem;
    15	close ZIP; 
    16	foreach $rem (@rem) {$this = "grep -v '^$rem' .message > .mess";
    17	`$this`; `mv .mess .message`;}
    18	`rm begin`;
    19	FINAL: {
    20	print "Would you like to add to current message list? If so, 
		type y.\n";
    21	chop($str=<STDIN>);
    22	if ($str eq "y") {print "Add new lines now.\n";
    23	print "Use carriage return at the end of each line, 
		use ^d to end.\n";
    24	open(APPEND, ">> .message");
    25	@text=<STDIN>;
    26	print APPEND @text;
    27	close APPEND;}}
    28	exit(0);
       
a. The _last change_ was the addition of line 6; I had difficulties with
the program and was worried that the .message file might be erased. I ad-
ded a copy from .message to .message.old so that the user could bail if
the .message called up seemed wrong, or if he/she wanted to restore the
erasures. I took the concept for this line from the unix account itself,
which always has such safeguards (there are others, for example dead.let-
ter, core, newfile.save).

b. Line 16 was the most difficult; I had to find a way to erase specified
lines in a file. I knew that grep -v could take a file and erase _one_
line, so it was a matter of cycling through. Each time, grep -v places a
modified .message file into .mess; .mess then returns to .message, and
this cycle continues until the erasing array @rem cycled through (with
$rem referencing specific instances).

This is a sloppy solution, as is the use of the goto command; they're both
inefficient. For a while, I wanted to do a grep -v $rem[1]&$rem[2] etc.,
using conjunctions, but became lazy - I'm not sure that grep -v can work
in this fashion, and I'm not that satisfied with my knowledge of awk to
try that one on. Since I don't expect more than 4-5 erasures at any one
time, I went for the easy solution.

c. Another sloppy solution, "type y" in lines 7 and 20; originally I had a
hash here, but it kept cycling after the control-d ending the add. Instead
of working through the process, I just went with y. On the other hand, I
worked it so that hitting two quick returns took me out of the program
(i.e. instead of having to hit "n"), saving time.

But these are all surface accounts of ignorance and meandering. What I was
after was simplicity (a program with only one or two things to do) and in-
visibility (a program that was hidden in dot files, appearing on startup).
The machinic aspect fascinates me; the program is bones and striations,
moving back and forth from unix shell to perl commands. It's more like a
sieve than a closure; in fact, Perl seems that way through and through,
running through its library, through sockets to the Net, through shell and
C program, etc. 

I would say that closure, exit(0);, is also foreclosure, closing the pro-
gram, hiding the code.

Larry Wall, the inventor of Perl, is described in his (and Christiansen's
and Schwartz's) Programming Perl 2nd edition, as "able to exploit his
three virtues (laziness, impatience, and hubris) to develop and enhance
all sorts of useful tools." These virtues are considered elsewhere, and I
quote from the glossary, since they summarize at least the beginnings of
something (I'm rambling for a change, but that's):

"laziness

The quality that makes you go to great effort to reduce overall energy ex-
penditure. It makes you write labor-saving programs that other people will
find useful, and document what you wrote so you don't have to answer so
many questions about it. Hence, the first great virtue of a programmer."

"impatience

The anger you feel when the computer is being lazy. This makes you write
programs that don't just react to your needs, but actually anticipate
them. Or at least that pretend to. Hence, the second great virtue of a
programmer."

"hubris

Excessive pride, the sort of thing Zeus zaps you for. Also the quality
that makes you write (and maintain) programs that other people won't want
to say bad things about. Hence, the third great virtue of a programmer." 

All of these relate to foreclosure and foreclosed domains. And I do want
to say as an aside, that I am not a programmer, but a bungler, and the
difference is clear; while I can hide behind facades, I screech to a halt,
through ignorance, with inelegant solutions. 

Most accounts of the psychology of software are concerned either with
hacking/hackers or user's end requirements (for example analyses of hyper-
textuality). What I would like to see would be a phenomenology of software
writing itself. As an example, vis-a-vis Hadamard again, and example b. a-
bove: When I was considering the grep -v line, I originally pictured thick
cords extending through a darkened/yellowed space; the cords wrapped a-
round themselves, circulating and shunting, almost like tendons. Symboliz-
ation appeared later, filling in the generalized structure.

The filling-in required a number of tests, due to ignorance; for example
the beginning of line 17, `$this` indicates that $this must first be in-
terpreted to grep -v etc., and that this interpretation would act as a
unix operator. Since I wasn't sure, I ran things under the perl -e line
interpreter, for example perl -e '$str=c; $this="w$str"; print `$this
thing`;' and so forth. (The line means that I'm ultimately saying, in the
shell, "wc thing," where "thing" is a file, and "wc" stands for word-
count.) 

These tests were worked out consciously, on the surface; the syntax has,
of course, to be exact. So from the cords to the tests, there was a
movement upwards (I'm aware of the spatial metaphor here), from semantics
towards syntax; pieces of the tests were them applied to the body of the
program, again consciously. In other words, the movement is a reverse ar-
ticulation of pausological structure, in which the structure of a sentence
develops unconsciously prior to its fulfilling by words (one pauses, for
example _after_ the conjunction, not before - the structure is present,
the words are still to "make their appearance"). In the programming exam-
ple, in mathematics, one often begins with cords, clouds, greyed areas,
fuzzy movements - the specified structure comes later, and then the entire
programmed mass is foreclosed, sutured, into a unary kernel of surface
morphology.

Thus there are two surfaces - that of syntactics within the program, and
that of the user-interface; and there are two depths - the program "all
the way down," and the semantic processes leading to its construction.

I'm not certain, of course, of any of this; observation is always faulty,
especially among naive or beginning programmers. (Nothing can be taken for
granted; commands and their flags are always looked up; debugging and
testing are critical, even in the simplest instances, etc.)


