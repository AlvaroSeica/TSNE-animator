ps
USER       PID %CPU %MEM SIZE  RSS TTY STAT START   TIME COMMAND
sondheim  4139  0.0  0.4  225  136  ?  S N Jan 25   0:00 ./haven -d 4000
sondheim  4201  0.0 16.2 5465 5052  ?  S   Jan 25  10:45 ./moo a.db a.db.new
sondheim  4203  0.0  0.2  521   88  ?  S   Jan 25   0:00 (MOO name-lookup ma
sondheim  5463  0.0  2.8 1157  884  ?  S   Jan 25   0:59 ./moo lily.db lily.db.n
sondheim  5465  0.0  0.2  521   84  ?  S   Jan 25   0:00 (MOO name-lookup master
sondheim  9297  0.0  1.8  287  592  ?  S N Feb  2   0:01 nuts
sondheim 11002  0.0  0.2  522   88  ?  S   Feb  5   0:00 (MOO name-lookup slave)
sondheim 11624  0.0  0.5  534  180  ?  S   Feb  5   0:00 (MOO name-lookup sl
sondheim 13621  1.1  1.7  392  536 pp3 S    00:52   0:00 -bash
sondheim 13630  0.0  0.7   77  220 pp3 R    00:52   0:00 ps -gux
hotpepper:~$ cd /lib
hotpepper:/lib$ ls
cpp@                 libc.so.4.6.27*      libe2p.so.1.0*
elf/                 libcurses.so.0@      libet.so.1@
ld-linux.so.1@       libcurses.so.0.1.2*  libet.so.1.0*
ld-linux.so.1.6.5*   libdl.so@            libm.so.4@
ld.so*               libdl.so.1@          libm.so.4.6.27*
libX11.so.3.1.0@     libdl.so.1.6.5*      libss.so.1@
libXaw.so.3.1.0@     libe2fs.so.1@        libss.so.1.0*
libXt.so.3.1.0@      libe2fs.so.1.0*
libc.so.4@           libe2p.so.1@
hotpepper:/lib$ cd | ls
cpp@                 libc.so.4.6.27*      libe2p.so.1.0*
elf/                 libcurses.so.0@      libet.so.1@
ld-linux.so.1@       libcurses.so.0.1.2*  libet.so.1.0*
ld-linux.so.1.6.5*   libdl.so@            libm.so.4@
ld.so*               libdl.so.1@          libm.so.4.6.27*
libX11.so.3.1.0@     libdl.so.1.6.5*      libss.so.1@
libXaw.so.3.1.0@     libe2fs.so.1@        libss.so.1.0*
libXt.so.3.1.0@      libe2fs.so.1.0*
libc.so.4@           libe2p.so.1@
hotpepper:/lib$ cd
hotpepper:~$ ls
INSTALLATION         lynx.man             startup*
Lily/                lynx_bookmarks.html  tar.exe*
Lorien/              nohup.out            temp/
MOO-1.7.9p2/         nuts/                zone/
lynx*                palace/
lynx.cfg             s.tar*
hotpepper:~$ ls -l
total 0
lrwxrwxrwx   1 root     root           17 Aug 12 09:04 ld-linux.so.1 -> ld-linux.so.1.6.5*
lrwxrwxrwx   1 root     root           20 Aug 12 09:04 ld-linux.so.1.6.5 -> ../ld-linux.so.1.6.5*
hotpepper:/lib/elf$ more README.Minimal
Instructions on using Minimal.db
------------ -- ----- ----------

The Minimal database is really quite minimal; there are no commands defined
other than the built-in ones (`PREFIX', `SUFFIX', and `.program') and only
enough verbs defined and/or programmed to make it possible to bootstrap.  It's
almost a certainty that you'd better off starting from the most recent release
of the LambdaCore database and possibly trimming things from that.  Some people
can't resist a challenge, though, so this document exists to orient them to the
meager contents of the Minimal database.

There are four objects in the Minimal database, arranged in the parent/child
hierarchy as follows:

Root Class (#1)
  System Object (#0)
  The First Room (#2)
  Wizard (#3)

The System Object has one defined verb, #0:do_login_command, which simply
returns #3.  This has the effect that all connections to the Minimal database
are automatically logged-in to Wizard, the only player.
--More--(33%)
The First Room has a verb named `eval' defined but not yet programmed.  It has
arguments `any any any' and permissions `rxd'.

The Wizard is initially located in the First Room and the other three objects
are initially located in #-1 (i.e., nowhere).

There are no other properties or verbs defined in the database.  There are no
forked or suspended tasks either.

The only way to get started in the Minimal database is either to change the
program for #0:do_login_command to perform some useful task (probably a more
tedious way to go, since you'd have to reconnect to get that verb to run), or
to provide a useful definition for `#2:eval' (probably the right course, since
you can invoke that more easily).

Of course, there are no restrictions on what you make this `eval' verb do, but
I recommend that you implement a simple, general MOO-code expression evaluator,
perhaps using code like this:

.program here:eval
notify(player, tostr(eval("return " + argstr + ";")[2]));
--More--(67%).

Or, perhaps something a tad fancier, to help you diagnose syntax errors more
easily:

.program here:eval
answer = eval("return " + argstr + ";");
if (answer[1])
  notify(player, tostr("=> ", answer[2]));
else
  for line in (answer[2])
    notify(player, line);
  endfor
endif
.

Of course, much fancier `eval' verbs are possible, but you'll discover them for
yourself, I'm sure.

From such a basis, you can do anything by using the various built-in functions
directly, like add_verb(), add_property(), etc.  With sufficient amounts of
work, you can build up a set of easier-to-use command-line interfaces to these
--More--(88%)facilities to make programming and building much easier.

If you should decide, after reading this, to build up an interesting database
starting from the Minimal one, and you succeed in doing so, please drop me a
line; I'd love to hear about it.

Pavel Curtis
aka Haakon, ArchWizard of LambdaMOO
Pavel@PARC.Xerox.Com
hotpepper:~/MOO-1.7.9p2$ more Minimal.db
4
1
0
1
3
#0
System Object

16
3
-1
-1
-1
1
-1
2
1
do_login_command
3
173
-1
0
--More--(30%)0
#1
Root Class

16
3
-1
-1
-1
-1
0
-1
0
0
0
#2
The First Room

0
3
-1
3
--More--(58%)-1
1
-1
3
1
eval
3
88
-2
0
0
#3
Wizard

7
3
2
-1
-1
1
-1
-1
--More--(81%)0
0
0
#0:0
return #3;
.
0 clocks
0 queued tasks
hotpepper:~/MOO-1.7.9p2$ 